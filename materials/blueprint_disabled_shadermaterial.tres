[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform vec4 grid : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;

	vec3 ref_normal = NORMAL;
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * refraction;
	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(SCREEN_TEXTURE,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount;
	ALPHA = 1.0;
	// Monkey Island \"Stan\" Effect
	if (mod(SCREEN_UV.x * VIEWPORT_SIZE.x/10.0, 1.0) < 0.1 || mod(SCREEN_UV.y * VIEWPORT_SIZE.y/10.0, 1.0) < 0.1) {
		ALBEDO = grid.rgb * (1.0 - ref_amount/5.0);
		EMISSION = grid.rgb * emission_energy * 2.0;
	} else {
		ALBEDO = albedo.rgb * (1.0 - ref_amount);
		EMISSION = (emission.rgb)*emission_energy;
	}
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.639216, 0, 1, 0.501961 )
shader_param/grid = Color( 1, 0, 0, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/emission = Color( 1, 0.560784, 0, 1 )
shader_param/emission_energy = 0.15
shader_param/refraction = 0.0
shader_param/refraction_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

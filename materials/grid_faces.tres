[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
// From converted spatial material
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform float anisotropy_ratio : hint_range(0,256);
uniform sampler2D texture_flowmap : hint_aniso;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float SPEED = 1.0;
uniform float STEP_SIZE = 10.0;
uniform float SHAPE_LENGTH = 100.0;
uniform float MOUNTAIN_MAX_HEIGHT = 100.0;
uniform float MOUNTAIN_MAX_COLOUR = 0.5;
uniform vec4 TOP_COLOUR = vec4(1.0, 0.0, 1.0, 1.0);
uniform bool SCROLL = false;
//
const float THIRD = 1.0 / 3.0;

void DO_MOUNTAIN(inout vec3 MVERTEX, inout vec4 MCOLOR, in vec4 MINSTANCE_CUSTOM) {
	float height = 0.0;
	// Get mountain height moving along z
	float z = MVERTEX.z / SHAPE_LENGTH;
	if (z < THIRD) {
		height = mix(MINSTANCE_CUSTOM.x, MINSTANCE_CUSTOM.y, z * 3.0);
	} else if (z < 2.0*THIRD) {
		z -= THIRD;
		height = mix(MINSTANCE_CUSTOM.y, MINSTANCE_CUSTOM.z, z * 3.0);
	} else {
		z -= 2.0*THIRD;
		height = mix(MINSTANCE_CUSTOM.z, MINSTANCE_CUSTOM.a, z * 3.0);
	}
	// Now modulate along x
	float x = MVERTEX.x / SHAPE_LENGTH;
	if (x <= 0.5) {
		height *= x * 2.0;
	} else {
		x -= 0.5;
		height *= 1.0 - (x * 2.0);
	}
	MVERTEX.y += MOUNTAIN_MAX_HEIGHT * height;
	MVERTEX.y = max(0, MVERTEX.y);
	MCOLOR = mix(MCOLOR, TOP_COLOUR, (MVERTEX.y / MOUNTAIN_MAX_COLOUR) / MOUNTAIN_MAX_HEIGHT);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	if (SCROLL) {
		float time = TIME * SPEED;
		bool first = (VERTEX.x == 0.0);
		VERTEX.x -= (time - floor(time)) * STEP_SIZE;
		if (INSTANCE_CUSTOM.x > 0.0) {
			DO_MOUNTAIN(VERTEX, COLOR, INSTANCE_CUSTOM);
		}
	}
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 anisotropy_tex = texture(texture_flowmap,base_uv).rga;
	ANISOTROPY = anisotropy_ratio*anisotropy_tex.b;
	ANISOTROPY_FLOW = anisotropy_tex.rg*2.0-1.0;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = null
shader_param/specular = null
shader_param/metallic = null
shader_param/roughness = null
shader_param/point_size = null
shader_param/anisotropy_ratio = null
shader_param/uv1_scale = null
shader_param/uv1_offset = null
shader_param/uv2_scale = null
shader_param/uv2_offset = null
shader_param/SPEED = 1.0
shader_param/STEP_SIZE = 10.0
shader_param/SHAPE_LENGTH = 100.0
shader_param/MOUNTAIN_MAX_HEIGHT = 100.0
shader_param/MOUNTAIN_MAX_COLOUR = 0.5
shader_param/TOP_COLOUR = Plane( 1, 0, 1, 1 )
shader_param/SCROLL = false
